generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model User {
  id           String    @id @default(uuid())
  name         String
  image        String?
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  lastLoginAt  DateTime  @default(now())
  providerId   String
  updatedAt    DateTime?
  bio          String?
  provider     Provider  @relation(fields: [providerId], references: [id])
  lastOnlineAt DateTime?

  Message    Message[]
  Chat       Chat[]
  Friend  Friend[]
  Attachment Attachment[]
  Member     Member[]
  Block Block[]
}

model Block {
  id       String @id @default(uuid())
  clientId String
  userId   String
  User     User   @relation(fields: [clientId], references: [id])

  @@unique([clientId, userId])
}

model Attachment {
  id     String   @id @default(uuid())
  url    String   @unique
  type   FileType
  userId String
  chatId String

  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  Chat               Chat                 @relation(fields: [chatId], references: [id], onDelete: Cascade)
  MessageAttachments MessageAttachments[]
}

model Friend {
  id       String @id @default(uuid())
  clientId String
  userId   String
  User     User   @relation(fields: [clientId], references: [id])

  @@unique([clientId, userId])
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String?
  isGroup   Boolean
  adminId   String
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  Message    Message[]
  Attachment Attachment[]
  Member     Member[]

  @@unique([adminId])
}

model Member {
  id       String   @id @default(uuid())
  userId   String
  chatId   String
  joinedAt DateTime @default(now())
  Chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  content   String
  senderId  String
  chatId    String
  isDeleted Boolean     @default(false)
  type      MessageType

  Chat               Chat                 @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User               User                 @relation(fields: [senderId], references: [id])
  MessageAttachments MessageAttachments[]

  @@index([chatId, senderId])
}

model MessageAttachments {
  id           String     @id @default(uuid())
  messageId    String
  attachmentId String
  Attachment   Attachment @relation(fields: [attachmentId], references: [id])
  Message      Message    @relation(fields: [messageId], references: [id])
}

enum MessageType {
  SIMPLE
  CONMPLEX
}

enum FileType {
  VIDEO
  PHOTO
  FILE
}